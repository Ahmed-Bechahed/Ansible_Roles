- name: Check if Docker is installed
  command: docker --version
  register: docker_check
  ignore_errors: true
  tags:
    - docker_check
    - systemd_service 
    - network_subnet
    - debug_cont

- name: Install Docker if not already installed
  include_role:
    name: install
    tasks_from: install_docker   
  when: docker_check.rc != 0
  tags:
    - docker_check
    - systemd_service 
    - network_subnet
    - debug_cont

# For TEST purpose
- name: debug docker image 
  debug:
    msg: "{{ container_image }}"
  tags:
    - debug_cont


# - name: Deploy systemd service file for Docker container
#   template:
#     src: "miniserv.conf.j2"
#     dest: "/etc/webmin/miniserv.conf"
#     mode: "0644"
#   notify:
#     - Reload webmin
#   tags:
#     - webmin
#     - systemd_webmin




# - name: Deploy custom Nginx configuration files
#   template:
#     src: "nginx_config.conf.j2"
#     dest: "/etc/nginx/conf.d/{{ item.name }}.conf"
#     owner: "root"
#     group: "root"
#     mode: 0644
#   loop: "{{ nginx_configs }}"

#   notify:
#     - Reload Nginx
#   become: true
#   tags:
#     - nginx_configuration




# docker network inspect


# - name: instal docker-info pre-requisites
#   apt:
#     name: "{{ item }}"
#     state: present
#   with_items: 
#     - python-setuptools
#     - python-pip
    
# - name: install docker-py
#   pip:
#     name: docker-py
#     state: present
#   vars:
#     ansible_python_interpreter: /usr/bin/python2
#   tags:
#     - docker-py

- name: Get infos on network
  docker_network_info:
    name: "{{ network_name }}"
  register: network_info
  tags:
    - network_subnet
    - systemd_service

- name: Set initial value for subnet_exist
  set_fact:
    subnet_exist: false
  tags:
    - network_subnet
    - systemd_service

- name: check if subnet exist
  block: 
    - name: update subnet_exist value
      set_fact:
        subnet_exist: true
      when: "{{ item.Subnet ==  subnet }}"
      with_items: "{{ network_info.network.IPAM.Config }}"
  when: network_info.exists == true
  tags:
    - network_subnet
    - systemd_service

- name: Check if network name and subnet are present and prompt
  block:

    - name: Prompt user for network input
      pause:
        prompt: "Enter a new network because the existing network is already in use"
        echo: yes
      register: network_prompt_result

    - name: Set new_network fact
      set_fact:
        network_name: "{{ network_prompt_result.user_input }}"
      when: network_prompt_result is defined

    - name: Prompt user for network input
      pause:
        prompt: "Enter a new subnet because the existing subnet is already in use"
        echo: yes
      register: subnet_prompt_result

    - name: Update subnet to new entered subnet
      set_fact:
        subnet: "{{ subnet_prompt_result.user_input }}" 
      when: subnet_prompt_result.user_input != ""

  when: network_info.exists == true and subnet_exist == true
  tags:
    - network_subnet
    - systemd_service

- name: Ensure the Docker network exists
  docker_network:
    name: "{{ network_name }}"
    ipam_config:
      - subnet: "{{ subnet }}"
    state: present
  tags:
    - network_subnet
    - systemd_service

# prepare logs/configs/backups folders


- name: create base, container, and subdirectories for container volumes, logs, config, backups
  file:
    path: "{{ base_directory }}/{{ item.0.container_name }}/{{ item.1 }}"
    state: directory
    mode: '0755'
  loop: "{{ lookup('nested', containers, ['volumes', 'logs', 'config', 'backups']) }}"
  tags:
    - container_directories
    - systemd_service



# deploy container

- name: Deploy systemd service file for Docker container
  template:
    src: "systemd_container.service.j2"
    dest: "/etc/systemd/system/{{ item.container_name }}.service"
    mode: "0644"
  notify:
    - Reload systemd
    - Enable and start service 
  with_items: "{{ containers }}"
  tags:
    - systemd_service 


